#!/usr/bin/env bash
# vim: filetype=bash

source "${HOME}/.bashrc"

# =============================================================================
# Homebrew
# =============================================================================

# Install homebrew if it's not installed

{{ if eq .chezmoi.os "darwin" }}

if ! command -v brew &> /dev/null; then
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

eval "$(/opt/homebrew/bin/brew shellenv)"

# homebrew completions
if type brew &>/dev/null; then
  HOMEBREW_PREFIX="$(brew --prefix)"
  if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
    source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
  else
    for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*
    do
      [[ -r "${COMPLETION}" ]] && source "${COMPLETION}"
    done
  fi
fi

{{ end }}

# =============================================================================
# Main Packages
# =============================================================================

# bat
if ! command -v bat &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install bat
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install bat -y
  {{ else }}
    echo 'bat not installed'
  {{ end }}
fi

# build-essential
if ! command -v build-essential &> /dev/null; then
  {{ if eq .chezmoi.os "linux" }}
    sudo apt install build-essential -y
  {{ else }}
    echo 'build-essential not installed'
  {{ end }}
fi


# Also see: .config/readline/inputrc

# =============================================================================
# NVM
# =============================================================================

if ! command -v nvm >/dev/null 2>&1; then
  mkdir -p "${NVM_DIR}"
  PROFILE=/dev/null bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash'
fi

# Install the latest LTS version if it doesn't exist
if ! command -v node >/dev/null 2>&1; then
  # Filter to get the latest LTS version
  lts_version=$(nvm ls-remote --lts | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | tail -n 1)
  nvm install "${lts_version}"
fi

# =============================================================================
# PNPM Packages
# =============================================================================

# First install pnpm with npm because it's already installed with nvm
if ! command -v pnpm >/dev/null 2>&1; then
  npm install -g pnpm
fi

# if ! command -v x >/dev/null 2>&1; then
#   npm install -g x
# fi

if ! command -v browser-sync >/dev/null 2>&1; then
  pnpm install -g browser-sync
fi

# Spellchecker for code
if ! command -v cspell >/dev/null 2>&1; then
  pnpm install -g cspell 
fi

# Scaffolder sometimes used by third parties
if ! command -v degit >/dev/null 2>&1; then
  pnpm install -g degit
fi

if ! command -v faker-cli >/dev/null 2>&1; then
  pnpm install -g faker-cli
fi

if ! command -v http-server >/dev/null 2>&1; then
  pnpm install -g http-server
fi

# Perl REPL
if ! command -v perli >/dev/null 2>&1; then
  pnpm install -g perli
fi

# The better-sqlite3 library installation causes a crash, needs investigation
# Convert sqlite tables to json
# if ! command -v sqlite-json >/dev/null 2>&1; then
#   pnpm install -g sqlite-json
# fi

# Install yarn in case it's required by thrid parties
if ! command -v yarn >/dev/null 2>&1; then
  pnpm install -g yarn
fi

# =============================================================================
# tmux
# =============================================================================

mkdir -p "${XDG_DATA_HOME}/tmux/plugins"

# Install Tmux Plugin Manager
git clone "https://github.com/tmux-plugins/tpm" "${XDG_DATA_HOME}/tmux/plugins/tpm"

# Install tpm plugins
"${XDG_DATA_HOME}/tmux/plugins/tpm/bin/install_plugins"

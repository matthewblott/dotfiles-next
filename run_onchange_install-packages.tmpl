#!/usr/bin/env bash
# vim: filetype=bash

# =============================================================================
# Homebrew
# =============================================================================

# Install homebrew if it's not installed
{{ if eq .chezmoi.os "darwin" }}
if ! command -v brew &> /dev/null; then
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi
{{ end }}

# =============================================================================
# Source bashrc 
# =============================================================================

source "${HOME}/.bashrc"

# =============================================================================
# Main Packages
# =============================================================================

# bat
if ! command -v bat &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install bat
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install bat -y
  {{ else }}
    echo 'bat not installed'
  {{ end }}
fi

# bison, required for gvm
if ! command -v bison &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install bison
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install bison -y
  {{ else }}
    echo 'bison not installed'
  {{ end }}
fi

# build-essential
if ! command -v build-essential &> /dev/null; then
  {{ if eq .chezmoi.os "linux" }}
    sudo apt install build-essential -y
  {{ else }}
    echo 'build-essential not installed'
  {{ end }}
fi

# cmake
if ! command -v cmake &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install cmake
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install cmake -y
  {{ else }}
    echo ' not installed'
  {{ end }}
fi

# curl
if ! command -v curl &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install curl
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install curl -y
  {{ else }}
    echo ' not installed'
  {{ end }}
fi

# deb-get
if ! command -v curl &> /dev/null; then
  {{ if eq .chezmoi.os "linux" }}
    sudo apt install curl lsb-release wget
    curl -sL https://raw.githubusercontent.com/wimpysworld/deb-get/main/deb-get | sudo -E bash -s install deb-get
  {{ else }}
    echo 'deb-get not installed'
  {{ end }}
fi

# dust
if ! command -v dust &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
     brew install dust
  {{ else if eq .chezmoi.os "linux" }}
#     # does not work on Linux arm
#     #   deb-get install du-dust
    echo ' not installed'
  {{ end }}
fi

# eza
if ! command -v eza &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install eza
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install -y gpg
    sudo mkdir -p /etc/apt/keyrings
    wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | sudo gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
    echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | sudo tee /etc/apt/sources.list.d/gierens.list
    sudo chmod 644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list
    sudo apt update
    sudo apt install -y eza 
  {{ else }}
    echo ' not installed'
  {{ end }}
fi

# fzf
if ! command -v fzf &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install fzf
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install fzf -y
  {{ else }}
    echo ' not installed'
  {{ end }}
fi

# gettext
{{ if eq .chezmoi.os "darwin" }}
  if ! command -v gettext &> /dev/null; then
    brew install gettext
  fi
{{ else if eq .chezmoi.os "linux" }}
  # appears like a newer version needs to be installed 
  sudo apt install gettext -y
{{ end }}


# gh
if ! command -v gh &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install gh
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install gh -y
  {{ else }}
    echo ' not installed'
  {{ end }}
fi

# git autocompletions
if [ ! -d "${XDG_DATA_HOME}/git" ] ; then
  mkdir -p "${XDG_DATA_HOME}/git"
  if [ ! -f "${XDG_DATA_HOME}/git/git-completion.bash" ] ; then
    curl "https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash" -o "${XDG_DATA_HOME}/git/git-completion.bash"
    chmod +x "${XDG_DATA_HOME}/git/git-completion.bash"
  fi
fi

# gitguardian

# brew install gitguardian/tap/ggshield

# curl -1sLf \
#   'https://dl.cloudsmith.io/public/gitguardian/ggshield/setup.deb.sh' \
#   | sudo -E bash

# hexdump, required for gvm
if ! command -v httpie &> /dev/null; then
  {{ if eq .chezmoi.os "linux" }}
    sudo apt-get install bsdmainutils -y
  {{ else }}
    echo 'hexdump not installed'
  {{ end }}
fi

# httpie
if ! command -v httpie &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install httpie
  {{ else if eq .chezmoi.os "linux" }}
    curl -SsL https://packages.httpie.io/deb/KEY.gpg | sudo gpg --dearmor -o /usr/share/keyrings/httpie.gpg
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/httpie.gpg] https://packages.httpie.io/deb ./" | sudo tee /etc/apt/sources.list.d/httpie.list > /dev/null
    sudo apt update
    sudo apt install httpie
  {{ else }}
    echo 'httpie not installed'
  {{ end }}
fi

# jq
if ! command -v jq &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install jq
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install jq -y
  {{ else }}
    echo 'jq not installed'
  {{ end }}
fi

# kitty
if ! command -v kitty; then
  # Kitty is stored in the main macOS root Applications folder so /dev/null doesn't apply.
  {{ if eq .chezmoi.os "darwin" }}
    brew install kitty
  {{ else if eq .chezmoi.os "linux" }}
    # curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
    echo ' not installed'
  {{ else }}
    echo 'kitty not installed'
  {{ end }}
fi

# lf
if ! command -v lf &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install lf 
  {{ else if eq .chezmoi.os "linux" }}
    # No package for linux arm, need to install with go
    echo 'lf not installed'
  {{ else }}
    echo 'lf not installed'
  {{ end }}
fi

# libffi-dev, requirement for using rbenv
{{ if eq .chezmoi.os "linux" }}
  sudo apt install libffi-dev -y
{{ end }}

# 
# libyaml-dev, requirement for using rbenv
{{ if eq .chezmoi.os "linux" }}
  sudo apt install libyaml-dev -y
{{ end }}

# libzip-dev, requirement for using rbenv
{{ if eq .chezmoi.os "linux" }}
  sudo apt install libzip-dev -y
{{ end }}

# lsb-release
{{ if eq .chezmoi.os "linux" }}
  if ! command -v lsb-release &> /dev/null; then
    sudo apt install lsb-release -y
  fi
{{ end }}

# neofetch
if ! command -v neofetch &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install neofetch
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install neofetch -y
  {{ else }}
    echo 'neofetch not installed'
  {{ end }}
fi

# ninja-build
if ! command -v ninja-build &> /dev/null; then
  {{ if eq .chezmoi.os "linux" }}
    sudo apt install ninja-build -y
  {{ else }}
    echo 'ninja-build not installed'
  {{ end }}
fi

# pwgen
if ! command -v pwgen &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install pwgen 
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install pwgen -y
  {{ else }}
    echo 'neofetch not installed'
  {{ end }}
fi

# pyenv
if ! command -v pyenv &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install pyenv
  {{ else if eq .chezmoi.os "linux" }}
    curl https://pyenv.run | bash
  {{ else }}
    echo 'pyenv not installed'
  {{ end }}
fi

# rbenv
if ! command -v rbenv &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install rbenv 
  {{ else if eq .chezmoi.os "linux" }}
    git clone "https://github.com/rbenv/rbenv.git" "${RBENV_ROOT}"
    "${RBENV_ROOT}/bin/rbenv" init
    ln -s "${RBENV_ROOT}/bin/rbenv" "${HOME}/.local/bin/rbenv"
  {{ else }}
    echo 'rbenv not installed'
  {{ end }}
fi

# ruby-build
if ! command -v ruby-build &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install rbenv 
  {{ else if eq .chezmoi.os "linux" }}
    git clone "https://github.com/rbenv/ruby-build.git" "${RBENV_ROOT}/plugins/ruby-build"
  {{ else }}
    echo 'ruby-build not installed'
  {{ end }}
fi

# rclone
if ! command -v rclone &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install rclone
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install rclone -y
  {{ else }}
    echo 'rclone not installed'
  {{ end }}
fi

# ripgrep
if ! command -v ripgrep >/dev/null 2>&1; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install ripgrep
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install ripgrep -y
  {{ else }}
    echo 'ripgrep not installed'
  {{ end }}
fi

{{ if eq .installs.java true }}

  # SDK Man
  if ! command -v sdk >/dev/null 2>&1; then
    curl -s "https://get.sdkman.io" | bash
  fi

{{ end }}

# Starship
if ! command -v starship >/dev/null 2>&1; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install starship
  {{ else }}
    echo 'starship not installed'
  {{ end }}
fi

# tgpt
if ! command -v tgpt &> /dev/null; then
  curl -sSL https://raw.githubusercontent.com/aandrew-me/tgpt/main/install | bash -s /usr/local/bin
fi

# tldr
if ! command -v tldr &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install tldr
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install tldr -y
  {{ else }}
    echo 'tlrd not installed'
  {{ end }}
fi

# tmux
if ! command -v tmux >/dev/null 2>&1; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install tmux
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install tmux -y
  {{ else }}
    echo 'tmux not installed'
  {{ end }}
fi

# trash
if ! command -v trash >/dev/null 2>&1; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install trash-cli
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install trash-cli -y
  {{ else }}
    echo 'trash not installed'
  {{ end }}
fi

# tree
if ! command -v tree >/dev/null 2>&1; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install tree
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install tree -y
  {{ else }}
    echo 'tree not installed'
  {{ end }}
fi

# unzip
if ! command -v unzip &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install unzip
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install unzip -y
  {{ else }}
    echo 'unzip not installed'
  {{ end }}
fi

# visidata
if ! command -v vd &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install saulpw/vd/visidata
  {{ else if eq .chezmoi.os "linux" }}
    echo 'visidata not installed'
    # pip3 install visidata
  {{ else }}
    echo 'visidata not installed'
  {{ end }}
fi

# wget
if ! command -v wget &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install wget
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install wget -y
  {{ else }}
    echo 'wget not installed'
  {{ end }}
fi

# xdg-ninja
if ! command -v xdg-ninja &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install xdg-ninja
  {{ else if eq .chezmoi.os "linux" }}
    git clone "https://github.com/b3nj5m1n/xdg-ninja" "${XDG_DATA_HOME}/xdg-ninja"
    ln -s "${XDG_DATA_HOME}/xdg-ninja/xdg-ninja.sh" "${HOME}/.local/bin/xdg-ninja"
  {{ else }}
    echo 'xdg-ninja not installed'
  {{ end }}
fi

# xclip
{{ if eq .chezmoi.os "linux" }}
  if ! command -v xclip &> /dev/null; then
    sudo apt install xclip -y
  fi
{{ end }}

# zip
if ! command -v zip &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install zip
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install zip -y
  {{ else }}
    echo 'zip not installed'
  {{ end }}
fi

# zoxide
if ! command -v zoxide &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install zoxide
  {{ else if eq .chezmoi.os "linux" }}
    sudo apt install zoxide -y
  {{ else }}
    echo 'zoxide not installed'
  {{ end }}
fi

# Also see: .config/readline/inputrc

# =============================================================================
# GVM
# =============================================================================

{{ if eq .installs.go true }}

  # Remove any previous installations
  rm -rf "${HOME}/.gvm"
  rm -rf "${GVM_ROOT}"

  # Install gvm 
  bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)

  mv "${HOME}/.gvm" "${GVM_ROOT}"

  # The following file sets the path to ${HOME}/.gvm so it needs to be removed.
  rm -f "${GVM_ROOT}/scripts/gvm"

  {{ if eq .chezmoi.os "darwin" }}
    # An installation of go is required to use gvm.
    brew install go  
    
    # Install the latest version of Go
    versions="$(gvm listall)"
    non_production_versions=$(echo "${versions}" | grep -E '(rc|beta|release)')
    production_versions=$(echo "${versions}" | grep -vxFf <(echo "${non_production_versions}"))
    latest_version=$(echo "${production_versions}" | tail -n 1)
    gvm install ${latest_version}
    gvm use ${latest_version} --default
    
    # Uninstall the go that was installed just for using gvm. 
    brew uninstall go

  {{ else if eq .chezmoi.os "linux" }}

    # An installation of go is required to use gvm.
    sudo apt install golang-go -y 

    # Install the latest version of Go
    versions="$(gvm listall)"
    non_production_versions=$(echo "${versions}" | grep -E '(rc|beta|release)')
    production_versions=$(echo "${versions}" | grep -vxFf <(echo "${non_production_versions}"))
    latest_version=$(echo "${production_versions}" | tail -n 1)
    gvm install ${latest_version}
    gvm use ${latest_version} --default

    # Uninstall the go that was installed just for using gvm. 
    sudo apt remove golang-go -y 
     
  {{ else }}
    echo 'gvm not installed'
  {{ end }}

  # Todo
  # Remove or disable the following line:
  # . "$GVM_ROOT/scripts/env/cd" && cd .
  # from the following file:
  # ${GVM_ROOT}/scripts/gvm-default

{{ end }}

# =============================================================================
# NVM
# =============================================================================

{{ if eq .installs.node true }}

  if [ ! -d "${NVM_DIR}" ] ; then
    mkdir -p "${NVM_DIR}"
  fi

  if [ ! -d "${NVM_DIR}/.git" ] ; then
    # Todo
    # Get the latest version of NVM
    PROFILE=/dev/null bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash'
  fi

  # Install the latest LTS version if it doesn't exist
  if ! command -v node >/dev/null 2>&1; then
    # Filter to get the latest LTS version
    lts_version=$(nvm ls-remote --lts | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | tail -n 1)
    nvm install "${lts_version}"
  fi

{{ end }}

# =============================================================================
# PNPM Packages
# =============================================================================

if command -v npm >/dev/null 2>&1; then

  # First install pnpm with npm because it's already installed with nvm
  if ! command -v pnpm >/dev/null 2>&1; then
    npm install -g pnpm
  fi

  if ! command -v browser-sync >/dev/null 2>&1; then
    pnpm install -g browser-sync
  fi

  # Spellchecker for code
  if ! command -v cspell >/dev/null 2>&1; then
    pnpm install -g cspell 
  fi

  # Scaffolder sometimes used by third parties
  if ! command -v degit >/dev/null 2>&1; then
    pnpm install -g degit
  fi

  if ! command -v faker-cli >/dev/null 2>&1; then
    pnpm install -g faker-cli
  fi

  if ! command -v http-server >/dev/null 2>&1; then
    pnpm install -g http-server
  fi

  # Perl REPL
  if ! command -v perli >/dev/null 2>&1; then
    pnpm install -g perli
  fi

  # Install yarn in case it's required by thrid parties
  if ! command -v yarn >/dev/null 2>&1; then
    pnpm install -g yarn
  fi

fi

# =============================================================================
# tmux
# =============================================================================

if [ ! -d "${XDG_DATA_HOME}/tmux/plugins" ] ; then
  mkdir -p "${XDG_DATA_HOME}/tmux/plugins"
fi

# Install Tmux Plugin Manager
if [ ! -d "${XDG_DATA_HOME}/tmux/plugins/tpm" ] ; then
  git clone "https://github.com/tmux-plugins/tpm" "${XDG_DATA_HOME}/tmux/plugins/tpm"
fi

# Install tpm plugins
"${XDG_DATA_HOME}/tmux/plugins/tpm/bin/install_plugins"

# =============================================================================
# Neovim
# =============================================================================

if ! command -v nvim &> /dev/null; then
  {{ if eq .chezmoi.os "darwin" }}
    brew install nvim
  {{ else if eq .chezmoi.os "linux" }}
    git clone "https://github.com/neovim/neovim" "${HOME}/neovim"

    cd "${HOME}/neovim"

    git checkout stable

    make CMAKE_BUILD_TYPE=RelWithDebInfo
    sudo make install

    if [ -d "${HOME}/neovim" ] ; then
      sudo rm -rf "${HOME}/neovim"
    fi

  {{ else }}
    echo 'neovim not installed'
  {{ end }}
fi


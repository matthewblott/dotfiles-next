#!/usr/bin/env bash

# =============================================================================
# Brew Packages
# =============================================================================

# if ! command -v x &> /dev/null; then
#   brew install x
# fi


if ! command -v brew &> /dev/null; then

# bat
if ! command -v bat &> /dev/null; then
  brew install bat
fi

# build-essential
# if ! command -v build-essential &> /dev/null; then
# fi

# cmake
if ! command -v cmake &> /dev/null; then
  brew install cmake
fi

# curl
if ! command -v curl &> /dev/null; then
  brew install curl
fi

# dust
if ! command -v dust &> /dev/null; then
  brew install dust
fi

# exa
# exa has been disabled because it is not maintained upstream!
# if ! command -v exa &> /dev/null; then
#   brew install exa
# fi

# fzf
if ! command -v fzf &> /dev/null; then
  brew install fzf
fi

# gettext
if ! command -v gettext &> /dev/null; then
  brew install gettext
fi

# gh
if ! command -v gh &> /dev/null; then
  brew install gh
fi

# httpie
if ! command -v httpie &> /dev/null; then
  brew install httpie
fi

# jq
if ! command -v jq &> /dev/null; then
  brew install jq
fi

# kitty
# Kitty is stored in the main macOS root Applications folder so /dev/null doesn't apply.
if ! command -v kitty; then
  brew install kitty
fi

# lf
if ! command -v lf &> /dev/null; then
  brew install lf 
fi

# lsb-release
# if ! command -v lsb-release &> /dev/null; then
# fi

# neofetch
if ! command -v neofetch &> /dev/null; then
  brew install neofetch
fi

# ninja-build
# if ! command -v ninja-build &> /dev/null; then
# fi

# pbcopy
# if ! command -v pbcopy &> /dev/null; then
# fi

# rclone
if ! command -v rclone &> /dev/null; then
  brew install rclone
fi

# ripgrep
if ! command -v ripgrep >/dev/null 2>&1; then
  brew install ripgrep
fi

# tldr
if ! command -v tldr &> /dev/null; then
  brew install tldr
fi

# tmux
if ! command -v tmux >/dev/null 2>&1; then
  brew install tmux
fi

# trash
if ! command -v trash >/dev/null 2>&1; then
  brew install trash-cli
fi

# tree
if ! command -v tree >/dev/null 2>&1; then
  brew install tree
fi

# unzip
if ! command -v unzip &> /dev/null; then
  brew install unzip
fi

# visidata
if ! command -v vd &> /dev/null; then
  brew install saulpw/vd/visidata
fi

# wget
if ! command -v wget &> /dev/null; then
  brew install wget
fi

# xdg-ninja
if ! command -v xdg-ninja &> /dev/null; then
  brew install xdg-ninja
fi

# xclip
# if ! command -v xclip &> /dev/null; then
#   brew install xclip
# fi

# zip
if ! command -v zip &> /dev/null; then
  brew install zip
fi

# zoxide
if ! command -v zoxide &> /dev/null; then
  brew install zoxide
fi

# =============================================================================
# Other Packages
# =============================================================================

# Also see: .config/readline/inputrc

# tgpt
# curl -sSL https://raw.githubusercontent.com/aandrew-me/tgpt/main/install | bash -s /usr/local/bin

# =============================================================================
# NVM
# =============================================================================

if ! command -v nvm >/dev/null 2>&1; then
  mkdir -p "${NVM_DIR}"
  PROFILE=/dev/null bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash'
fi

# Install the latest LTS version if it doesn't exist
if ! command -v node >/dev/null 2>&1; then
  # Filter to get the latest LTS version
  lts_version=$(nvm ls-remote --lts | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | tail -n 1)
  nvm install "${lts_version}"
fi

# =============================================================================
# PNPM Packages
# =============================================================================

# First install pnpm with npm because it's already installed with nvm
if ! command -v pnpm >/dev/null 2>&1; then
  npm install -g pnpm
fi

# if ! command -v x >/dev/null 2>&1; then
#   npm install -g x
# fi

if ! command -v browser-sync >/dev/null 2>&1; then
  pnpm install -g browser-sync
fi

# Spellchecker for code
if ! command -v cspell >/dev/null 2>&1; then
  pnpm install -g cspell 
fi

# Scaffolder sometimes used by third parties
if ! command -v degit >/dev/null 2>&1; then
  pnpm install -g degit
fi

if ! command -v faker-cli >/dev/null 2>&1; then
  pnpm install -g faker-cli
fi

if ! command -v http-server >/dev/null 2>&1; then
  pnpm install -g http-server
fi

# Perl REPL
if ! command -v perli >/dev/null 2>&1; then
  pnpm install -g perli
fi

# The better-sqlite3 library installation causes a crash, needs investigation
# Convert sqlite tables to json
# if ! command -v sqlite-json >/dev/null 2>&1; then
#   pnpm install -g sqlite-json
# fi

# Install yarn in case it's required by thrid parties
if ! command -v yarn >/dev/null 2>&1; then
  pnpm install -g yarn
fi

# =============================================================================
# tmux
# =============================================================================

mkdir -p "${XDG_DATA_HOME}/tmux/plugins"

# Install Tmux Plugin Manager
git clone "https://github.com/tmux-plugins/tpm" "${XDG_DATA_HOME}/tmux/plugins/tpm"

# Install tpm plugins
"${XDG_DATA_HOME}/tmux/plugins/tpm/bin/install_plugins"

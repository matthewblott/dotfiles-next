#!/usr/bin/env bash
# vim: filetype=bash

set -o errexit
set -o nounset
set -o pipefail
IFS=$'\n\t'

# Function to get the current version from git tags
get_current_version() {
  git describe --abbrev=0 --tags 2>/dev/null | sed 's/v//'
}

# Function to calculate the next version based on the provided argument
calculate_next_version() {
  current_version=$1
  version_type=$2

  # Split the version into components
  IFS='.' read -ra version_components <<< "$current_version"

  major=${version_components[0]}
  minor=${version_components[1]}
  patch=${version_components[2]}

  # Increment the appropriate version component
  case $version_type in
    "major")
      ((major++))
      minor=0
      patch=0
      ;;
    "minor")
      ((minor++))
      patch=0
      ;;
    "patch")
      ((patch++))
      ;;
    *)
      echo "Invalid version type. Please use 'major', 'minor', or 'patch'."
      exit 1
      ;;
  esac

  # Print the next version
  echo "$major.$minor.$patch"
}

# Get the current version
current_version=$(get_current_version)

# Check if a version was found
if [ -z "$current_version" ]; then
  echo "No version found in git tags."
  exit 1
fi

# If no arguments are provided, assume patch
if [ $# -eq 0 ]; then
  version_type="patch"
else
  version_type=$1
fi

# Calculate the next version based on the provided argument
next_version=$(calculate_next_version "$current_version" "$version_type")

# echo "next version: $next_version"
echo $next_version

{{ if eq .chezmoi.os "darwin" }}
echo "$next_version" | tr -d '\n' | pbcopy
{{ end }}
